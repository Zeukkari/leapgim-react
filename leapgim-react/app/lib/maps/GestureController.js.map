{"version":3,"sources":["GestureController.coffee"],"names":[],"mappings":"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","file":"GestureController.js","sourceRoot":"/source/","sourcesContent":["#\n# Gesture Controller\n#\n# Parses signs (leapgim's own gestures) and triggers actions based on recipes.\n#\n\nconfig = window.config\n\nclass GestureController\n    constructor: ->\n        @startTime = null\n        # General state data\n        state = {}\n        state.lastTimestamp = 0\n        state.currentTimestamp = 0\n        state.signRecord = {}\n        state.recipeRecord = {}\n        state.activeSigns = []\n        state.lastActiveSigns = []\n        #state.status = \"Disconnected\" # disconnect/connected/something\n        state.timeout = window.config.timeout\n\n        # Sign record\n        for signName, sign of window.config.signs\n            sign.name = signName\n            sign.timeVisible = 0\n            # Sign status can be active/pending/inactive. A pending status implies that the sign has been visible but not long enough.\n            sign.status = 'inactive'\n            state.signRecord[signName] = sign\n        # Recipe record\n        for recipeName, recipe of window.config.recipes\n            recipe.name = recipeName\n            recipe.timeVisible = 0\n            # recipe status can be active/pending/inactive. A pending status implies that the recipe has been visible but not long enough.\n            recipe.signIndex = 0\n            state.recipeRecord[recipeName] = recipe\n        @state = state\n        @currentFrame = {}\n        window.gestureController = @\n\n    directionCalculator: (x, y, z) =>\n\n        max = Math.max(x, y, z)\n\n        if max is x\n            if x > 0\n                result = 'left'\n            if x < 0\n                result = 'right'\n        if max is y\n            if y > 0\n                result ='down'\n            if y < 0\n                status = 'up'\n        if max is z\n            if z > 0\n                status = 'forward'\n            if z < 0\n                status = 'backward'\n\n        return status\n\n    resetSignRecord: (sign) =>\n        #console.log \"Reset sign #{sign}\"\n        data = @state.signRecord[sign]\n        data.status = 'inactive'\n        data.timeVisible = 0\n\n    wipeRecord: () =>\n        #console.log \"Wiping record..\"\n        #console.log \"ActionHero recipe state: \", window.actionHero.recipeState\n        manager = window.actionHero\n        for sign of @state.signRecord\n            @resetSignRecord sign\n\n        for recipe of @state.recipeRecord\n            @state.recipeRecord[recipe].signIndex = 0\n            manager.tearDownRecipe recipe\n\n\n\n    # Arg1 = sign name\n    updateSignRecord: (sign) =>\n        #console.log \"Update sign #{sign}\"\n        data = @state.signRecord[sign]\n        oldStatus = data.status\n        #console.log \"Assert sign\", data\n        if(@assertSign(data, @state.currentFrame))\n            # Sign passes assertion\n            if(oldStatus != 'inactive')\n                # Update timeVisible\n                data.timeVisible += @state.currentTimestamp - @state.lastTimestamp\n            if(!data.minTime or data.minTime < data.timeVisible)\n                data.status = 'active'\n            else\n                data.status = 'pending'\n        else\n            @resetSignRecord sign\n\n    # Arg1 = recipe name\n    updateRecipeRecord: (recipe) =>\n        #console.log \"Update recipe #{recipe}\"\n        data = @state.recipeRecord[recipe]\n        #console.log \"data: \", data\n        oldIndex = data.signIndex\n\n        #console.log \"oldIndex: \", oldIndex\n\n        # Figure out the sign to look for\n        sign = data.signs[oldIndex]\n\n        #console.log \"sign: \", sign\n        #console.log \"active signs: \", @state.activeSigns\n\n        if sign in @state.activeSigns\n            data.signIndex += 1\n        else if(oldIndex > 0)\n            secondaryIndex = oldIndex-1\n            secondarySign = data.signs[secondaryIndex]\n            if secondarySign in @state.activeSigns\n                data.signIndex = oldIndex # Keep it as it is..\n            else\n                data.signIndex = 0\n        else\n            data.signIndex = 0\n\n        manager = window.actionHero\n        #console.info \"Data: \", data\n        if(data.signIndex == data.signs.length)\n            # Activate recipe\n            manager.activateRecipe data.name\n        else\n            # Tear down recipe.. action controller handles extra events\n            manager.tearDownRecipe data.name\n\n            # Tear down with timers\n            manager.tearDownRecipe data.name\n\n    assertSign: (sign, frameData) =>\n        # Assert true unless a filter statement is found\n        sign_ok = true\n\n        for handModel in frameData.hands\n            if(sign.grab)\n                grabStrength = handModel.grabStrength\n                if(sign.grab.min)\n                    if(grabStrength < sign.grab.min)\n                        sign_ok = false\n                if(sign.grab.max)\n                    if(grabStrength > sign.grab.max)\n                        sign_ok = false\n            if(sign.pinch)\n                pinchStrength = handModel.pinchStrength\n                pincher = handModel.pinchingFinger\n\n                if(sign.pinch.pincher)\n                    if (sign.pinch.pincher != pincher)\n                        sign_ok = false\n                if(sign.pinch.min)\n                    if(pinchStrength < sign.pinch.min)\n                        sign_ok = false\n                if(sign.pinch.max)\n                    if(pinchStrength > sign.pinch.max)\n                        sign_ok = false\n            if(sign.extendedFingers)\n                extendedFingers = sign.extendedFingers\n                if(extendedFingers.indexFinger?)\n                    if extendedFingers.indexFinger != handModel.extendedFingers.indexFinger\n                        sign_ok = false\n                if(extendedFingers.middleFinger?)\n                    if extendedFingers.middleFinger != handModel.extendedFingers.middleFinger\n                        sign_ok = false\n                if(extendedFingers.ringFinger?)\n                    if extendedFingers.ringFinger != handModel.extendedFingers.ringFinger\n                        sign_ok = false\n                if(extendedFingers.pinky?)\n                    if extendedFingers.pinky != handModel.extendedFingers.pinky\n                        sign_ok = false\n                if(extendedFingers.thumb?)\n                    if extendedFingers.thumb != handModel.extendedFingers.thumb\n                        sign_ok = false\n            if sign.hover\n                if sign.hover.left?\n                    if hand.type is not 'left' and sign.hover.left is true\n                        sign_ok = false\n                if sign.hover.minTime?\n                    if sign.hover.minTime > hand.timeVisible\n                        sign_ok = false\n\n        # pitch: up (180) and down (-180)\n        # roll: left (180) and right (180)\n\n       # for pointableModel in frameData.pointables\n       #      if sign.tool?\n       #          if pointable.tool is false\n       #              sign_ok = false\n       #      if sign.noSameHand\n       #          if pointable.id != hand.id then sign_ok = false\n\n        for gestureModel in frameData.gestures\n            #fingers = gesture.pointableIds[f]\n            #amount = gesture.pointableIds[0].lenght\n            #hands = gesture.handIds[0].lenght\n            gesture = gestureModel\n\n            if sign.minDuration?\n                if sign.minDuration > gesture.duration then sign_ok = false\n            if sign.maxDuration?\n                if sign.maxDuration < gesture.duration then sign_ok = false\n\n            if sign.circle\n                #if sign.circle.fingerCount?\n                #    if sign.circle.fingerCount is not amount then sign_ok = false\n                if sign.circle.minCircles?\n                    if sign.circle.minCircles > gesture.progress\n                        sign_ok = false\n                if sign.circle.maxCircles?\n                    if sign.circle.maxCircles < gesture.progress\n                        sign_ok = false\n                if sign.circle.minRadius?\n                    if sign.circle.minRadius > gesture.radius\n                        sign_ok = false\n                if sign.circle.maxRadius?\n                    if sign.circle.maxRadius < gesture.radius\n                        sign_ok = false\n                #if sign.circle.twoHanded?\n                #    if gesture.handIds[0].lenght > 2 then sign_ok = false\n                if sign.circle.clockwise is true\n                    if gesture.direction < 0 then sign_ok = false\n                if sign.circle.clockwise is false\n                    if gesture.direction > 0 then sign_ok = false\n                if gesture.state is 'stop'\n                    sign_ok = false\n            if sign.swipe\n                swipe = sign.swipe\n                pos = gesture.position\n                spos = gesture.startPosition\n                if swipe.minDistance?\n                    if gesture.position > gesture.startPosition then sign_ok = false\n                if swipe.maxDistance?\n                    if gesture.position < gesture.startPosition then sign_ok = false\n                if swipe.minSpeed?\n                    if swipe.speed < gesture.speed then sign_ok = false\n                if swipe.maxSpeed?\n                    if swipe.speed > gesture.speed then sign_ok = false\n                if swipe.direction?\n                    x = Math.abs(spos[0] - pos[0])\n                    y = Math.abs(spos[1] - pos[0])\n                    z = Math.abs(spos[1] - pos[0])\n                    result = @directionCalculator(x, y, z)\n                    if result != swipe.direction\n                        sign_ok = false\n\n        return sign_ok\n\n    getActiveSigns: () =>\n        activeSigns = []\n        for sign, data of @state.signRecord\n            if(data.status == 'active')\n                activeSigns.push sign\n                if(data.feedback?.audio)\n                    if(sign not in @state.lastActiveSigns)\n                        #console.log \"Audio notification #{data.feedback.audio}\"\n                        window.feedback.audioNotification data.feedback.audio\n                if(data.feedback?.visual?)\n                    options = data.feedback.visual\n                    window.feedback.visualNotification options.id, options.msg\n\n        return activeSigns\n\n    parseGestures: (model) =>\n        #console.log \"Parse gestures: \", model\n        clearTimeout(@timerID)\n        @state.lastActiveSigns = @state.activeSigns\n\n        manager = window.actionHero\n        # Update position for mouse movement\n        manager.position = model.hands[0].position\n        #console.log \"Set position: \", manager.position\n\n        # Update timestamps\n        @state.lastTimestamp = @state.currentTimestamp\n        @state.currentTimestamp = model.timestamp\n        # Current frame\n        @state.currentFrame = model\n\n        if !@startTime\n            @startTime = model.timestamp\n        else\n            @currentTotalTime = model.timestamp\n\n        # Overall time elapsed in ms since the start\n        elapsedMS = @currentTotalTime - @startTime\n        elapsedSeconds = elapsedMS / 1000000\n\n        window.feedback.time elapsedSeconds\n\n        visible = model.hands[0].visible\n\n        window.feedback.handVisible visible\n\n        confidence = model.hands[0].confidence\n\n        window.feedback.confidenceMeter confidence\n\n        # Process signs\n        #console.log \"Process signs\", @state.signRecord\n        for sign of @state.signRecord\n            #console.log \"Sign: \", sign\n            @updateSignRecord(sign)\n\n        # Set active signs\n        @state.activeSigns = @getActiveSigns()\n\n        # Process recipes\n        #console.log \"Process recipes\", @state.recipeRecord\n        for recipe of @state.recipeRecord\n            @updateRecipeRecord(recipe)\n\n        callback = => @wipeRecord()\n        delay = window.config.timeout\n\n        #console.log \"Callback\", callback\n        #console.log \"Delay: \", delay\n\n        # Set timeout\n        @timerID = setTimeout callback, delay\n\nwindow.GestureController = GestureController\n"]}